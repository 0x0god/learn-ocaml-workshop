#+TITLE: Snake

* Introduction
  Snake is a video game where the player maneuvers a line (the snake)
  around a screen. The goal is to grow the snake's length by eating
  apples that are randomly generated on the screen.

  The snake constantly moves forward. Users can interact with the game by
  changing the direction of the snake. The controls are:
  - [w] -> go up
  - [s] -> go down
  - [a] -> go left
  - [d] -> go right

  For this exercise, we have implemented an event-loop that drives the
  game and handles keyboard input and a graphic module that deals with
  rendering the game onto the screen.

  You will have to implement the logic for creating pieces on the
  board as well as for progressing the game by a single step.

  Feel free to play around with the working solutions demo before
  getting started. It will be helpful to understand the game's
  mechanisms when working on these exercises!

* Code Overview
  We have implemented a simple event-loop that drives the game and
  handles graphic rendering as well as keyboard input in
  [[file:bin/snake.ml][snake.ml]]. Feel free to take a look to get a sense of how the game
  engine works under the hoodl.

  Here, we provide an overview of some important parts of the
  code. Even for the files that we don't cover here, it might be
  helpful to glance at its interface file to get a better sense of all
  of the pieces.

** ~Snake.t~
   A [Snake.t] represents a snake on the game board.

** ~Apple.t~
   An [Apple.t] represents an apple on the game board.

** ~Game.t~
   A [Game.t] represents the entire game state, including the current
   [snake] and [apple]. Make sure to look at [[file:lib/game.mli][game.mli]] to understand
   its structure.

   Please note! In this model, we treat the origin of the playing area
   as its lower left hand corner.

* Expect Tests
  This game makes use of expect tests to test functions individually
  and ensure that they are all working properly. Take a quick look at
  its [[https://github.com/janestreet/ppx_expect][documentation]] for how they work.

  You shouldn't need to write or change any expect tests while working
  on these exercises, but they may be helpful for debugging purposes
  while writing code. 

* Getting Started
  The functions for you to implement are in
  - [[file:lib/direction.ml][direction.ml]]
  - [[file:lib/apple.ml][apple.ml]]
  - [[file:lib/snake.ml][snake.ml]]
  - [[file:lib/game.ml][game.ml]]

  To compile the tests, run:

  #+BEGIN_SRC bash
  $ dune runtest
  #+END_SRC

  To run the game, run:
  #+BEGIN_SRC bash
  $ dune exec bin/lumines.exe
  #+END_SRC

* Order of Implementation
  A suggested ordering for working through this game (though feel free
  to do in a different order if you prefer) is:

** Phase 1: Initial Rendering
   - [ ] [[file:lib/apple.ml][apple.ml]]: [create]
   - [ ] [[file:lib/snake.ml][snake.ml]]: [create]
   - [ ] [[file:lib/snake.ml][snake.ml]]: [locations]
   - [ ] [[file:lib/game.ml][game.ml]]: [in_bounds]
   - [ ] [[file:lib/game.ml][game.ml]]: [create]

   At the end of phase 1, you should be able to see the initial board
   get rendered with an apple and a snake.

** Phase 2: Utilities
   - [ ] [[file:lib/snake.ml][snake.ml]]: [grow_over_next_steps]
   - [ ] [[file:lib/snake.ml][snake.ml]]: [head_location]
   - [ ] [[file:lib/snake.ml][snake.ml]]: [set_direction] 
   - [ ] [[file:lib/game.ml][game.ml]]: [set_direction]
   - [ ] [[file:lib/direction.ml][direction.ml]]: [next_position]

** Phase 3: Game Progression
   - [ ] [[file:lib/snake.ml][snake.ml]]: [step]
   - [ ] [[file:lib/game.ml][game.ml]]: [step]

   At the end of phase 3, you should be able to play snake in its
   entirety and also pass all expect tests.

* Extensions
  Once your game is working, there are many fun extensions that you
  can try to implement!

  Some exmaples, for inspiration:
  - caluculate and display a score
  - make the snake change color 
  - make apples "time out" and disappear
  - make special apples that have a different effect on the length of
    the snake
